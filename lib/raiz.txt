
##########################################################################
# clearscreen.
# lock throttle to 0.
# wait 5.

# set targetApoapsis to 35786000. 
# set targetPeriapsis to 210000. 
# set targetInclination to 28.6.
# set firstTWR to 1.25.
# set secondTWR to 0.80.
# set finalTWR to 6.8.
# set endAlt to (100000/firstTWR).
# set finalPitch to (45/((secondTWR+finalTWR)/2)).
# set startRoll to 270.

# set mode to 1.


# until mode = 0{

                
                ##########   PRE LAUNCH PREP  #################
# 	if mode = 1 {
# 		lock throttle to 1.
# 		stage.
# 		wait 4.
# 		stage.

# 		lock steering to heading (90,90) + R(0,0,startRoll).
# 		wait 2.
# 		set mode to 2.
# 	}


###########  INITIAL TREGECTORY  ##################
# - Runs until ship altitude == 140,000km 
# - If thrust < 1, stage
# - set target pitch to either final pitch or 1 - 	
###################################################
    #if mode = 2 {
	
# 		set targetPitch to (max(finalPitch,90 * (1 - (SHIP:ALTITUDE / endAlt)))).
# 		wait 0.001.
# 		lock steering to heading (90,targetPitch) + R(0,0,startRoll).
		
# 		if SHIP:MAXTHRUST < 1{
# 			stage.
# 			wait 1.
# 		}
		
# 		if SHIP:ALTITUDE > 140000 {
# 			toggle ag1.
# 			set mode to 3.
# 		}	
# 	}
    
############  
# 	if mode = 3 {
# 		timetoAP().
		
# 		if SHIP:MAXTHRUST > 1 {
# 			set currentAcc to SHIP:MAXTHRUST / SHIP:MASS.
# 		}
		
# 		set progradePitch to proPitch().
		
# 		set feedAP to SHIP:APOAPSIS + (SHIP:VERTICALSPEED * TTA) + (0.5 * (currentAcc * sin(progradePitch) - 9.81) * (TTA ^ 2)).
# 		set velPot to (2 * currentAcc * TTA) + SHIP:GROUNDSPEED.
		
# 		if (feedAP < targetPeriapsis OR velPot < 7400) AND targetPitch < 20{
# 			set targetPitch to targetPitch + 0.05.
# 			wait 0.01.
# 		}
		
# 		if (feedAP > targetPeriapsis OR velPot > 7400) AND targetPitch > -10{
# 			set targetPitch to targetPitch - 0.05.
# 			wait 0.01.
# 		}
		
# 		if SHIP:APOAPSIS > targetPeriapsis {
# 			set mode to 4.
# 		}
# 	}
	
# 	if mode = 4{
# 		if SHIP:VERTICALSPEED > 20.0 and targetPitch > -10{
# 			set targetPitch to targetPitch - 0.12.
# 			lock steering to heading (90,targetPitch) + R(0,0,startRoll).
# 			wait 0.01.
# 		}

# 		else if SHIP:VERTICALSPEED < -20.0 and targetPitch < 15{
# 			set targetPitch to targetPitch + 0.12.
# 			lock steering to heading (90,targetPitch) + R(0,0,startRoll).
# 			wait 0.01.
# 		}

# 		else if SHIP:VERTICALSPEED >= -20.0 and SHIP:VERTICALSPEED <= 20.0 {
# 			if targetPitch > 0 {
# 				set targetPitch to targetPitch - 0.12.
# 				lock steering to heading (90,targetPitch) + R(0,0,startRoll).
# 				wait 0.01.
# 			}
# 			if targetPitch < 0 {
# 				set targetPitch to targetPitch + 0.12.
# 				lock steering to heading (90,targetPitch) + R(0,0,startRoll).
# 				wait 0.01.
# 			}
# 		}
	
# 		if SHIP:APOAPSIS > targetApoapsis * 1.01 and SHIP:PERIAPSIS > 160000{
# 			lock throttle to 0.
# 			wait 2.
# 			set mode to 9.
# 		}
# 	}
	
# 	if mode = 8 {
# 		if SHIP:APOAPSIS > targetPeriapsis {
# 			lock throttle to 0.
# 			timetoAP().
# 			if TTA > 20{
# 				set warp to 2.
# 			}
# 			if TTA < 20{
# 				set warp to 0.
# 				lock steering to heading (90,0) + R(0,0,startRoll).
# 				wait 5.
# 				lock throttle to 1.
# 				set mode to 9.
# 			}
# 		}
			
# 		if SHIP:APOAPSIS < targetPeriapsis {
# 			lock steering to heading (90,0) + R(0,0,startRoll).
# 			wait 1.
# 			lock throttle to 0.2.
# 		}
# 	}
	
	
# 	if mode = 9 {
# 		lock throttle to 0.
# 		unlock steering.
# 		print "Launch Program Concluded".
# 		set mode to 0.

# 	}

# }

# function timetoAP{
# 	set TTA to ETA:APOAPSIS.

# 	if ETA:APOAPSIS > (SHIP:OBT:PERIOD / 2) {
# 		set TTA to ETA:APOAPSIS - SHIP:OBT:PERIOD.
# 	}
# }

# function proPitch {
	
# 	return 90 - vang(ship:up:vector, ship:velocity:surface).
# }
